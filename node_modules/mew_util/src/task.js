var childProcess = require("child_process");

if (/^win/i.test(process.platform)) {
    process.on("SIGINT", function () {
        process.exit(1);
    });
}

var murder = function (task) {
    try {
        if (/^win/i.test(process.platform)) {
            task.kill("SIGINT");
        } else {
            task.kill("SIGHUP");
        }
    } catch (error) {
        // Do nothing
    }
};

var suicide = function () {
    if (/^win/i.test(process.platform)) {
        process.exit(1);
    } else {
        process.exit(-1);
    }
};

// -> command, switches
// -> command, switches, silent
//
var executeCommandSync = function (command) {

    throw new Error("Current not support spwanSync");

    // var silent = false;
    // var switches = [];
    // if (arguments.length >= 2) {
    //     switches = arguments[1];
    // }
    // if (arguments.length >= 3) {
    //     silent = arguments[2];
    // }
    //
    // var spawnedProcess = childProcess.spawnSync(command, switches);
    //
    // if (!silent) {
    //     process.stderr.write(spawnedProcess.stderr);
    //     process.stdout.write(spawnedProcess.stdout);
    // }
    //
    // return spawnedProcess.spawnedProcess.output;
    
};

// -> command, switches, callback
// -> command, switches, silent, callback
// -> command, switches, cwd, callback
// -> command, switches, cwd, silent, callback
//
var executeCommand = function (command, switches) {

    var cwd = null;
    var silent = false;
    var callback = null;
    if (arguments[2] instanceof Function) {
        callback = arguments[2];
    } else if (arguments[2].constructor === String) {
        cwd = arguments[2];
        if (arguments[3] instanceof Function) {
            callback = arguments[3];
        } else {
            silent = arguments[3];
            if (arguments[4] instanceof Function) {
                callback = arguments[4];
            }
        }
    } else {
        silent = arguments[2];
        if (arguments[3] instanceof Function) {
            callback = arguments[3];
        }
    }

    if (!callback) {
        callback = function (error) {
            if (error) {
                throw error;
            }
        };
    }

    var spawnedProcess = null;
    if (cwd) {
        spawnedProcess = childProcess.spawn(command, switches, {
            "cwd": cwd
        });
    } else {
        spawnedProcess = childProcess.spawn(command, switches);
    }

    var buffers = [];
    var errorBuffers = [];

    spawnedProcess.stdout.on("data", function (data) {

        if (!silent) {
            process.stdout.write(data);
        }

        buffers.push(data);

    });

    spawnedProcess.stderr.on("data", function (data) {
        if (!silent) {
            process.stderr.write(data);
        }
        errorBuffers.push(data);
    });

    spawnedProcess.on("close", function (code) {

        if (code !== 0) {
            callback(new Error("Exit code not zero: " + command), Buffer.concat(buffers), Buffer.concat(errorBuffers));
        } else {
            callback(null, Buffer.concat(buffers), Buffer.concat(errorBuffers));
        }

    });

};

module.exports = {
    "executeCommand": executeCommand,
    "executeCommandSync": executeCommandSync,
    "murder": murder,
    "suicide": suicide
};
