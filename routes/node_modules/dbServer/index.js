const db = require("./operator");
const mew_util = require("mew_util");
const jieba = require("nodejieba");
const cheerio = require("cheerio");
const fs = require("fs");
const path = require("path");

jieba.load();

const SQLs = {

updateArticle:

"update articles inner join articles_index \
on articles.id=articles_index.id set \
`title`=?,\
`author`=?,\
`short`=?,\
`cover`=?,\
`summary`=?,\
`tags`=?,\
`content`=?,\
`title_index`=?,\
`short_index`=?,\
`content_index`=?,\
`tag_index`=? \
where articles.id = ?",

newArticle:
[
"insert into articles\
(title, author, short, cover, summary, tags, content)\
values(?,?,?,?,?,?,?)",

"insert into articles_index\
(id, title_index, short_index, content_index, tag_index)\
values(?,?,?,?,?)"
],

findDocument: "select * from articles where id = ? limit 1",
searchDocument: fs.readFileSync(path.join(__dirname, "sqls", "search.sql")).toString(),
removeDocument: "delete from articles where id = ?"
}

// Object.keys(SQLs).forEach(function(name) {
//     if (mew_util.isKindOf(SQLs[name], Array)) {
//         SQLs[name].forEach(function(val, index) {
//             SQLs[name][index] = val.split("\t").join(" ");
//         })
//     } else {
//         SQLs[name] = SQLs[name].split("\t").join(" ");
//     }
// })

exports.init = db.init;

const keyWordFilter = function(keyword) {
    if (!keyword.length) {
        return false;
    }
    if (/([\[\]\,.?"\(\)+_*\/\\&\$#^@!~`]|(?!\s)'\s+|\s+'(?!\s)|(?!\s)"\s+|\s+"(?!\s))/.test(keyword)) {
        return false;
    }
    if (/[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/.test(keyword)) {
        return false;
    }
    if (["的", "地", "得", "\n", "\r", "\t"].indexOf(keyword) != -1) {
        return false;
    }
    if (keyword.indexOf(" ") >= 0) {
        return false;
    }
    return true;
}

const keyWorkencode = function(keyword) {
    return new Buffer(keyword).toString("base64");
}

const unique = function(array){
  var n = {}, r = [], len = array.length, val, type;
    for (var i = 0; i < array.length; i++) {
        val = array[i];
        type = typeof val;
        if (!n[val]) {
            n[val] = [type];
            r.push(val);
        } else if (n[val].indexOf(type) < 0) {
            n[val].push(type);
            r.push(val);
        }
    }
    return r;
}

exports.removeArticle = function(data, callback) {
    var userAddSql_Params = [data.id];
    var userAddSql = SQLs.removeDocument;
    db.operation(userAddSql, userAddSql_Params, callback);
}

exports.saveArticle = function(data, callback) {
    mew_util.async(function() {
        var step = this;

        var plainContent = cheerio.load(data.content)("*").text();

        var contentKeyWords = jieba.cut(plainContent, true).filter(keyWordFilter).map(keyWorkencode).join(" ");
        var titleKeyWords = jieba.cut(data.title, true).filter(keyWordFilter).map(keyWorkencode).join(" ");
        var shortKeyWords = jieba.cut(data.short, true).filter(keyWordFilter).map(keyWorkencode).join(" ");
        var tagsKeyWords = data.tags.split(",").map(keyWorkencode).join(" ");

        if (data.id != undefined) {
            this.pool.insertId = data.id;
            var userAddSql_Params = [data.title, data.author, data.short, data.cover, data.summary, data.tags, data.content,
                                    titleKeyWords, shortKeyWords, contentKeyWords, tagsKeyWords, data.id];
            var userAddSql = SQLs.updateArticle;
            db.operation(userAddSql, userAddSql_Params, this.test);

        } else {
            mew_util.async(function() {
                var userAddSql_Params = [];
                var userAddSql = "begin";
                db.operation(userAddSql, userAddSql_Params, this.test);
            }).then(function() {
                var userAddSql_Params = [data.title, data.author, data.short, data.cover, data.summary, data.tags, data.content];
                var userAddSql = SQLs.newArticle[0];
                db.operation(userAddSql, userAddSql_Params, this.test);
            }).then(function(data) {
                step.pool.insertId = data.insertId;

                var userAddSql_Params = [data.insertId, titleKeyWords, shortKeyWords, contentKeyWords, tagsKeyWords];
                var userAddSql = SQLs.newArticle[1];
                db.operation(userAddSql, userAddSql_Params, this.test);
            }).then(function() {
                var userAddSql_Params = [];
                var userAddSql = "commit";
                db.operation(userAddSql, userAddSql_Params, this.test);
            }).pipe(this);

        }

    }).then(function(data) {
        callback(null, this.pool.insertId);
    }).rejected(function(err) {
        console.log(err);
        callback(err);
    })

}

exports.getDocument = function(id, callback) {
    mew_util.async(function() {
        var userAddSql_Params = [id];
        var userAddSql = SQLs.findDocument;
        db.operation(userAddSql, userAddSql_Params, this.test);
    }).then(function(data) {
        if (data.length) {
            callback(null, data[0]);
        } else {
            var err = new Error("Not found");
            err.causeByNotFound = true;
            this.reject(err);
        }
    }).rejected(function(err) {
        callback(err);
    })
}

exports.searchArticles = function(keyword, page, callback) {
    if (!page || page < 1) {
        page = 1;
    }
    mew_util.async(function() {
        var keys = unique(jieba.cut(keyword, true).filter(keyWordFilter).map(keyWorkencode)).join(" ");

        var userAddSql_Params = [keys, keys, keys, keys];
        var userAddSql = SQLs.searchDocument;
        db.operation(userAddSql, userAddSql_Params, this.test);

    }).then(function(data) {
        callback(null, {
            count: data.length,
            data: data.slice((page-1)*5, 5)
        });
    }).rejected(function(err) {
        console.log(err);
        callback(err);
    })
}
